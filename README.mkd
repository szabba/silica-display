# Visualisation for SILICA

The project includes two visualization for use with porous silica glass
simulations. One displays a piece of glass an magnetic nanoparticles under it's
incluence. The other shows the shape of space with potential values in a given
range.

## Install

```
> python setup.py install
```

## Glass and particles

```
> python -m silica.viz.glass [OPTIONS]
```

### Glass file

A file describing a glass grid may be specified using the `-G`/`--glass-file`
option.

It must be named `dataWIDTHxHEIGHTxDEPTHtNUMBER_NUMBER.dat` for the
program to properly guess the glass piece's size. The glass is shown as built
from cubes of unit size with integer coordinates.

The file can contain any number of lines, each containing 4 numbers separated
by single spaces. The first three are the (x, y, z) coordinates of a glass
cube. The last one is 1 when a cube is present at the coordinates, and 0 when
it's not.

The same spatial coordinates must not appear in multiple lines of a glass file.
The program behaviour when they do is left unspecified.

Line ordering doesn't matter. Lines ending in 0s can be safely omitted.

An example follows.

```
0 0 0 1
1 1 1 1
2 2 2 1
```

Yes, it is not a very imaginative example.

### Particle animation file

Using the `-p`/`--particles` option, the user may specify a file containing
particle animation data. It's first line should contain the number of
particles to be rendered in each frame.

The following lines should contain six numbers each. The first three are the
cartesian coordinates of the center of a particle. The following three are the
components of the normalised magnetic moment.

Frames are not delimeted in any way. If a valid file has 41 lines and the first
one contains the number 4, it contains 10 frames.

An example follows.

```
1
0 0 0 0 0 0
1 1 1 0 0 0
```

Yes, it is not a very imaginative example.

## Potential

```
> python -m silica.viz.potential [OPTIONS] POTENTIAL_FILE
```

The first line of the potential file contains the dimmensions of the potential
as three, space-separated integers.

Each line after that contains the coordinates of a grid cell and the value at
that cell. If a value for a cell isn't specified (no line contains it's
coordinates) it defaults to zero. The behaviour with a file that contains the
same coordinates more than once is undefined.

# User interface

The applications are controlled through the mouse and keyboard.

## Camera control

The camera looks at a certain point. Dragging with the Left Mouse Button
rotates the view around this point. Not all rotations are possible to make.

As an aid in understanding the current camera orientation, the coordinate
system axes are displayed in the lower left corner of the window. In line with
the usual 3D graphics convention the x axis is red, the y axis is green and the
z axis is blue.

Dragging with the Right Mouse Button translates the camera parallel to the
screen plane. Scrolling the mouse wheel zooms the camera in/out. Pressing C on
the keyboard will reset all the camera parameters.

## Particle playback control

In the glass visualization, pressing Space will toggle the particle animation
playback. Pressing L will toggle whether the animation loops. Pressing the
left/right arrow key will move one frame backward/forward, irrespective of
whether the animation is currently playing or not.

# Dependencies

To run the program you will need:

* Python 2.7
* Pyglet 1.1
* Numpy 1.8
* Scipy 0.14
* GCC 4.9

The versions specified are the ones the program has been extensively run
against. It might work just fine with other ones.

# Language usage statistic

The program is written in a combination of three different languages and
uses several not-so-simple libraries and APIs.

```
      33 text files.
      32 unique files.
      12 files ignored.

http://cloc.sourceforge.net v 1.62  T=0.07 s (342.1 files/s, 45641.8 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Python                          13           1004            354           1452
GLSL                             8             61              0            123
C                                1              8              0             18
-------------------------------------------------------------------------------
SUM:                            23           1088            354           1627
-------------------------------------------------------------------------------
```

That gives a total of

* 2810 lines of Python
* 184 lines of the OpenGL Shading Language
* 26 lines of C

`custom.cloc` contains the language specification for GLSL (so that `cloc` can
count shader sources).
